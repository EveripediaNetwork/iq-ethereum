{
  "address": "0xBe0B7Dedad660BdEE5CDE49b95a2811Dd6F03E9B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_emittedToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_hiIQ_address",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DefaultInitialization",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RecoveredERC20",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token_address",
          "type": "address"
        }
      ],
      "name": "YieldCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "YieldDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yieldRate",
          "type": "uint256"
        }
      ],
      "name": "YieldPeriodRenewed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "checkpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_addr",
          "type": "address"
        }
      ],
      "name": "checkpointOtherUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "eligibleCurrentHiIQ",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "eligible_hiiq_bal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "current_ending_timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emittedToken",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emitted_token_address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fractionParticipating",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getYield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "yield0",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getYieldForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "greylist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "greylistAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializeDefault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeYieldApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_yieldCollectionPaused",
          "type": "bool"
        }
      ],
      "name": "setPauses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_yieldDuration",
          "type": "uint256"
        }
      ],
      "name": "setYieldDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_new_rate0",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "sync_too",
          "type": "bool"
        }
      ],
      "name": "setYieldRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sync",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalHiIQParticipating",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalHiIQSupplyStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userHiIQCheckpointed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userHiIQEndpointCheckpointed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userIsInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userYieldPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldCollectionPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldPerHiIQ",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldPerHiIQStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "yields",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x469751442136b7bfc3379ac7b55e70e08a579307c2e9fe8cb2e98d7372866d7e",
  "receipt": {
    "to": null,
    "from": "0x59bBEbA0608959D8cC68e7367ca9bF937901b423",
    "contractAddress": "0xBe0B7Dedad660BdEE5CDE49b95a2811Dd6F03E9B",
    "transactionIndex": 0,
    "gasUsed": "1701749",
    "logsBloom": "0x
    "blockHash": "0x942c45edb78b9d5b6c073050db1d99c33510e3467766c62dc4eb2cb1833f3c15",
    "transactionHash": "0x469751442136b7bfc3379ac7b55e70e08a579307c2e9fe8cb2e98d7372866d7e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9232747,
        "transactionHash": "0x469751442136b7bfc3379ac7b55e70e08a579307c2e9fe8cb2e98d7372866d7e",
        "address": "0xBe0B7Dedad660BdEE5CDE49b95a2811Dd6F03E9B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000059bbeba0608959d8cc68e7367ca9bf937901b423"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x942c45edb78b9d5b6c073050db1d99c33510e3467766c62dc4eb2cb1833f3c15"
      }
    ],
    "blockNumber": 9232747,
    "cumulativeGasUsed": "1701749",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6215dc73D822F5a19Bd9772688A21667546b1918",
    "0x279926CcA1Ccd061eE423C633f7376E2bdecc53A"
  ],
  "solcInputHash": "26bab6b692a3a26bcfdab43af14c37cc",
  "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_emittedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hiIQ_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DefaultInitialization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoveredERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"}],\"name\":\"YieldCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"YieldDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldRate\",\"type\":\"uint256\"}],\"name\":\"YieldPeriodRenewed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_addr\",\"type\":\"address\"}],\"name\":\"checkpointOtherUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"eligibleCurrentHiIQ\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eligible_hiiq_bal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"current_ending_timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emittedToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitted_token_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fractionParticipating\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yield0\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getYieldForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"greylist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"greylistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeDefault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeYieldApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_yieldCollectionPaused\",\"type\":\"bool\"}],\"name\":\"setPauses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_yieldDuration\",\"type\":\"uint256\"}],\"name\":\"setYieldDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new_rate0\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sync_too\",\"type\":\"bool\"}],\"name\":\"setYieldRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHiIQParticipating\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHiIQSupplyStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userHiIQCheckpointed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userHiIQEndpointCheckpointed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userIsInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userYieldPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldCollectionPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldPerHiIQ\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldPerHiIQStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"yields\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Rewards/HiIQRewards.sol\":\"HiIQRewards\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x74b0525c81e47810f1bd795755962bdb84de3a4f71cfcb063f4c4d4999a3e96b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa4fdec0ea7d943692cac780111ff2ff9d89848cad0494a59cfaed63a705054b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xf1ac0ee2ca2b36f90574d3b2b37422ced4fa829741d80794c62f5958a2d8f474\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc77dd6233a82c7c6e3dc49da8f3456baa00ecd3ea4dfa9222002a9aebf155dcd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x938f2783ceb543ad266344cc5c420e1294026507081d6b7c2ec01b3303056265\",\"license\":\"MIT\"},\"src/Lock/IhiIQ.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.1;\\npragma experimental ABIEncoderV2;\\n\\ninterface IhiIQ {\\n    struct LockedBalance {\\n        int128 amount;\\n        uint256 end;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n    function balanceOf(address addr) external view returns (uint256);\\n\\n    function balanceOf(address addr, uint256 _t) external view returns (uint256);\\n\\n    function balanceOfAt(address addr, uint256 _block) external returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function totalSupply(uint256 t) external view returns (uint256);\\n\\n    function totalSupplyAt(uint256 _block) external returns (uint256);\\n\\n    function totalIQSupply() external view returns (uint256);\\n\\n    function totalIQSupplyAt(uint256 _block) external view returns (uint256);\\n\\n    function locked(address addr) external view returns (LockedBalance memory);\\n\\n    /* ========== PUBLIC FUNCTIONS ========== */\\n    function checkpoint() external;\\n}\\n\",\"keccak256\":\"0xceb7bd54485cdb721ea2209750290c85bcccd50cb5dfc15a747a2b2ab286f1ce\",\"license\":\"AGPL-3.0\"},\"src/Rewards/HiIQRewards.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n// ====================================================================\\n// |     ______                   _______                             |\\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\\\/ __ `/ __ \\\\/ ___/ _ \\\\  |\\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\\n// | /_/   /_/   \\\\__,_/_/|_|  /_/   /_/_/ /_/\\\\__,_/_/ /_/\\\\___/\\\\___/   |\\n// |                                                                  |\\n// ====================================================================\\n// ======================veFXSYieldDistributorV4=======================\\n// ====================================================================\\n// Distributes IQ protocol yield based on the claimer's hiIQ balance\\n// V3: Yield will now not accrue for unlocked hiIQ\\n\\n// Frax Finance: https://github.com/FraxFinance\\n\\n// Primary Author(s)\\n// Travis Moore: https://github.com/FortisFortuna\\n\\n// Reviewer(s) / Contributor(s)\\n// Jason Huan: https://github.com/jasonhuan\\n// Sam Kazemian: https://github.com/samkazemian\\n\\n// Originally inspired by Synthetix.io, but heavily modified by the Frax team (hiIQ portion)\\n// https://raw.githubusercontent.com/Synthetixio/synthetix/develop/contracts/StakingYield.sol\\n\\nimport \\\"./TransferHelper.sol\\\";\\nimport \\\"../Lock/IhiIQ.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract HiIQRewards is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    // Instances\\n    IhiIQ private hiIQ;\\n    ERC20 public emittedToken;\\n\\n    // Addresses\\n    address public emitted_token_address;\\n\\n    // Constant for price precision\\n    uint256 private constant PRICE_PRECISION = 1e6;\\n\\n    // Yield and period related\\n    uint256 public periodFinish;\\n    uint256 public lastUpdateTime;\\n    uint256 public yieldRate;\\n    uint256 public yieldDuration = 604800; // 7 * 86400  (7 days)\\n\\n    // Yield tracking\\n    uint256 public yieldPerHiIQStored = 0;\\n    mapping(address => uint256) public userYieldPerTokenPaid;\\n    mapping(address => uint256) public yields;\\n\\n    // hiIQ tracking\\n    uint256 public totalHiIQParticipating = 0;\\n    uint256 public totalHiIQSupplyStored = 0;\\n    mapping(address => bool) public userIsInitialized;\\n    mapping(address => uint256) public userHiIQCheckpointed;\\n    mapping(address => uint256) public userHiIQEndpointCheckpointed;\\n    mapping(address => uint256) private lastRewardClaimTime; // staker addr -> timestamp\\n\\n    // Greylists\\n    mapping(address => bool) public greylist;\\n\\n    // Admin booleans for emergencies\\n    bool public yieldCollectionPaused = false; // For emergencies\\n\\n    struct LockedBalance {\\n        int128 amount;\\n        uint256 end;\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier notYieldCollectionPaused() {\\n        require(yieldCollectionPaused == false, \\\"Yield collection is paused\\\");\\n        _;\\n    }\\n\\n    modifier checkpointUser(address account) {\\n        _checkpointUser(account);\\n        _;\\n    }\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(address _emittedToken, address _hiIQ_address) {\\n        emitted_token_address = _emittedToken;\\n        emittedToken = ERC20(_emittedToken);\\n\\n        hiIQ = IhiIQ(_hiIQ_address);\\n        lastUpdateTime = block.timestamp;\\n\\n        // 1 IQ a day at initialization\\n        yieldRate = (uint256(365e18)).div(365 * 86400);\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function fractionParticipating() external view returns (uint256) {\\n        return totalHiIQParticipating.mul(PRICE_PRECISION).div(totalHiIQSupplyStored);\\n    }\\n\\n    // Only positions with locked hiIQ can accrue yield. Otherwise, expired-locked hiIQ\\n    // is de-facto rewards for IQ.\\n    function eligibleCurrentHiIQ(address account)\\n        public\\n        view\\n        returns (uint256 eligible_hiiq_bal, uint256 current_ending_timestamp)\\n    {\\n        uint256 curr_hiiq_bal = hiIQ.balanceOf(account);\\n        IhiIQ.LockedBalance memory curr_locked_bal_pack = hiIQ.locked(account);\\n\\n        current_ending_timestamp = curr_locked_bal_pack.end;\\n\\n        // Only unexpired hiIQ should be eligible\\n        if (userHiIQEndpointCheckpointed[account] != 0 && (block.timestamp >= userHiIQEndpointCheckpointed[account])) {\\n            eligible_hiiq_bal = 0;\\n        } else if (block.timestamp >= current_ending_timestamp) {\\n            eligible_hiiq_bal = 0;\\n        } else {\\n            eligible_hiiq_bal = curr_hiiq_bal;\\n        }\\n    }\\n\\n    function lastTimeYieldApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function yieldPerHiIQ() public view returns (uint256) {\\n        if (totalHiIQSupplyStored == 0) {\\n            return yieldPerHiIQStored;\\n        } else {\\n            return (\\n                yieldPerHiIQStored.add(\\n                    lastTimeYieldApplicable().sub(lastUpdateTime).mul(yieldRate).mul(1e18).div(totalHiIQSupplyStored)\\n                )\\n            );\\n        }\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        // Uninitialized users should not earn anything yet\\n        if (!userIsInitialized[account]) return 0;\\n\\n        // Get eligible hiIQ balances\\n        (uint256 eligible_current_hiiq, uint256 ending_timestamp) = eligibleCurrentHiIQ(account);\\n\\n        // If your hiIQ is unlocked\\n        uint256 eligible_time_fraction = PRICE_PRECISION;\\n        if (eligible_current_hiiq == 0){\\n            // And you already claimed after expiration\\n            if (lastRewardClaimTime[account] >= ending_timestamp) {\\n                // You get NOTHING. You LOSE. Good DAY ser!\\n                return 0;\\n            }\\n            // You haven't claimed yet\\n            else {\\n                uint256 eligible_time = (ending_timestamp).sub(lastRewardClaimTime[account]);\\n                uint256 total_time = (block.timestamp).sub(lastRewardClaimTime[account]);\\n                eligible_time_fraction = PRICE_PRECISION.mul(eligible_time).div(total_time);\\n            }\\n        }\\n\\n        // If the amount of hiIQ increased, only pay off based on the old balance\\n        // Otherwise, take the midpoint\\n        uint256 hiiq_balance_to_use;\\n        {\\n            uint256 old_hiiq_balance = userHiIQCheckpointed[account];\\n            if (eligible_current_hiiq > old_hiiq_balance){\\n                hiiq_balance_to_use = old_hiiq_balance;\\n            }\\n            else {\\n                hiiq_balance_to_use = ((eligible_current_hiiq).add(old_hiiq_balance)).div(2);\\n            }\\n        }\\n\\n        return (\\n            hiiq_balance_to_use\\n                .mul(yieldPerHiIQ().sub(userYieldPerTokenPaid[account]))\\n                .mul(eligible_time_fraction)\\n                .div(1e18 * PRICE_PRECISION)\\n                .add(yields[account])\\n        );\\n    }\\n\\n    function getYieldForDuration() external view returns (uint256) {\\n        return (yieldRate.mul(yieldDuration));\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function _checkpointUser(address account) internal {\\n        // Need to retro-adjust some things if the period hasn't been renewed, then start a new one\\n        sync();\\n\\n        // Calculate the earnings first\\n        _syncEarned(account);\\n\\n        // Get the old and the new hiIQ balances\\n        uint256 old_hiiq_balance = userHiIQCheckpointed[account];\\n        (uint256 new_hiiq_balance, uint256 current_ending_timestamp) = eligibleCurrentHiIQ(account);\\n\\n        // Update the user's stored hiIQ balance\\n        userHiIQCheckpointed[account] = new_hiiq_balance;\\n\\n        // Update the user's stored ending timestamp\\n        userHiIQEndpointCheckpointed[account] = current_ending_timestamp;\\n\\n        // Update the total amount participating\\n        if (new_hiiq_balance >= old_hiiq_balance) {\\n            uint256 weight_diff = new_hiiq_balance.sub(old_hiiq_balance);\\n            totalHiIQParticipating = totalHiIQParticipating.add(weight_diff);\\n        } else {\\n            uint256 weight_diff = old_hiiq_balance.sub(new_hiiq_balance);\\n            totalHiIQParticipating = totalHiIQParticipating.sub(weight_diff);\\n        }\\n\\n        // Mark the user as initialized\\n        if (!userIsInitialized[account]) {\\n            userIsInitialized[account] = true;\\n            lastRewardClaimTime[account] = block.timestamp;\\n        }\\n    }\\n\\n    function _syncEarned(address account) internal {\\n        if (account != address(0)) {\\n            uint256 earned0 = earned(account);\\n            yields[account] = earned0;\\n            userYieldPerTokenPaid[account] = yieldPerHiIQStored;\\n        }\\n    }\\n\\n    // Anyone can checkpoint another user\\n    function checkpointOtherUser(address user_addr) external {\\n        _checkpointUser(user_addr);\\n    }\\n\\n    // Checkpoints the user\\n    function checkpoint() external {\\n        _checkpointUser(msg.sender);\\n    }\\n\\n    function getYield()\\n        external\\n        nonReentrant\\n        notYieldCollectionPaused\\n        checkpointUser(msg.sender)\\n        returns (uint256 yield0)\\n    {\\n        require(greylist[msg.sender] == false, \\\"Address has been greylisted\\\");\\n\\n        yield0 = yields[msg.sender];\\n        if (yield0 > 0) {\\n            yields[msg.sender] = 0;\\n            TransferHelper.safeTransfer(emitted_token_address, msg.sender, yield0);\\n            emit YieldCollected(msg.sender, yield0, emitted_token_address);\\n        }\\n\\n        lastRewardClaimTime[msg.sender] = block.timestamp;\\n    }\\n\\n    // If the period expired, renew it\\n    function retroCatchUp() internal {\\n        // Failsafe check\\n        require(block.timestamp > periodFinish, \\\"Period has not expired yet!\\\");\\n\\n        // Ensure the provided yield amount is not more than the balance in the contract.\\n        // This keeps the yield rate in the right range, preventing overflows due to\\n        // very high values of yieldRate in the earned and yieldPerToken functions;\\n        // Yield + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n        uint256 num_periods_elapsed = uint256(block.timestamp.sub(periodFinish)) / yieldDuration; // Floor division to the nearest period\\n        uint256 balance0 = emittedToken.balanceOf(address(this));\\n        require(\\n            yieldRate.mul(yieldDuration).mul(num_periods_elapsed + 1) <= balance0,\\n            \\\"Not enough emittedToken available for yield distribution!\\\"\\n        );\\n\\n        periodFinish = periodFinish.add((num_periods_elapsed.add(1)).mul(yieldDuration));\\n\\n        uint256 yield0 = yieldPerHiIQ();\\n        yieldPerHiIQStored = yield0;\\n        lastUpdateTime = lastTimeYieldApplicable();\\n\\n        emit YieldPeriodRenewed(emitted_token_address, yieldRate);\\n    }\\n\\n    function sync() public {\\n        // Update the total hiIQ supply\\n        totalHiIQSupplyStored = hiIQ.totalSupply();\\n\\n        if (block.timestamp > periodFinish) {\\n            retroCatchUp();\\n        } else {\\n            uint256 yield0 = yieldPerHiIQ();\\n            yieldPerHiIQStored = yield0;\\n            lastUpdateTime = lastTimeYieldApplicable();\\n        }\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    // Added to support recovering LP Yield and other mistaken tokens from other systems to be distributed to holders\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n        // Only the owner address can ever receive the recovery withdrawal\\n        TransferHelper.safeTransfer(tokenAddress, owner(), tokenAmount);\\n        emit RecoveredERC20(tokenAddress, tokenAmount);\\n    }\\n\\n    function setYieldDuration(uint256 _yieldDuration) external onlyOwner {\\n        require(\\n            periodFinish == 0 || block.timestamp > periodFinish,\\n            \\\"Previous yield period must be complete before changing the duration for the new period\\\"\\n        );\\n        yieldDuration = _yieldDuration;\\n        emit YieldDurationUpdated(yieldDuration);\\n    }\\n\\n    function initializeDefault() external onlyOwner {\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(yieldDuration);\\n        totalHiIQSupplyStored = hiIQ.totalSupply();\\n        emit DefaultInitialization();\\n    }\\n\\n    function greylistAddress(address _address) external onlyOwner {\\n        greylist[_address] = !(greylist[_address]);\\n    }\\n\\n    function setPauses(bool _yieldCollectionPaused) external onlyOwner {\\n        yieldCollectionPaused = _yieldCollectionPaused;\\n    }\\n\\n    function setYieldRate(uint256 _new_rate0, bool sync_too) external onlyOwner {\\n        yieldRate = _new_rate0;\\n\\n        if (sync_too) {\\n            sync();\\n        }\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event YieldCollected(address indexed user, uint256 yield, address token_address);\\n    event YieldDurationUpdated(uint256 newDuration);\\n    event RecoveredERC20(address token, uint256 amount);\\n    event YieldPeriodRenewed(address token, uint256 yieldRate);\\n    event DefaultInitialization();\\n}\\n\",\"keccak256\":\"0x0bbac2979f576e9cda3d0511b06885bf239ed8ab9602962f13a1efeda16077ab\",\"license\":\"AGPL-3.0\"},\"src/Rewards/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.1;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xffedf05b7ecb3ac91fc7004c3f187a2cfad0244247353ddadb0389e4d6a034fc\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405262093a8060085560006009819055600c819055600d556013805460ff191690553480156200003157600080fd5b5060405162001cb638038062001cb68339810160408190526200005491620001d2565b6000620000606200011f565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060018055600480546001600160a01b03199081166001600160a01b0385811691821790935560038054831690911790556002805490911691831691909117905542600655620001136813c9647e25a99400006301e1338062000123602090811b62000f5417901c565b60075550620002619050565b3390565b60006200016d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506200017660201b60201c565b90505b92915050565b60008183620001a35760405162461bcd60e51b81526004016200019a91906200020b565b60405180910390fd5b506000838581620001b057fe5b0495945050505050565b80516001600160a01b03811681146200017057600080fd5b60008060408385031215620001e5578182fd5b620001f18484620001ba565b9150620002028460208501620001ba565b90509250929050565b6000602080835283518082850152825b8181101562000239578581018301518582016040015282016200021b565b818111156200024b5783604083870101525b50601f01601f1916929092016040019392505050565b611a4580620002716000396000f3fe608060405234801561001057600080fd5b50600436106102405760003560e01c80637c26287111610145578063c2c4c5c1116100bd578063ebe2b12b1161008c578063f40c1ca711610071578063f40c1ca71461041f578063fc939bb114610432578063fff6cae91461043a57610240565b8063ebe2b12b14610404578063f2fde38b1461040c57610240565b8063c2c4c5c1146103e4578063c8f33c91146103ec578063e172cf21146103f4578063e9218ff6146103fc57610240565b8063941d9f65116101145780639f8a835a116100f95780639f8a835a146103b6578063a875f472146103c9578063ad1148cb146103dc57610240565b8063941d9f6514610390578063948e25a2146103a357610240565b80637c2628711461035a5780638980f11f146103625780638da5cb5b1461037557806391519bda1461037d57610240565b806331ca208c116101d8578063561fd712116101a75780636999ac931161018c5780636999ac9314610337578063715018a61461033f57806374ea0b981461034757610240565b8063561fd7121461032757806356d9fff31461032f57610240565b806331ca208c146102e457806338359fc2146102f757806350fe98ac1461030c5780635169a7a11461031f57610240565b806314b305371161021457806314b30537146102aa578063169d27ef146102ca57806319aec6d2146102d457806322415660146102dc57610240565b80628cc2621461024557806302be7f8e1461026e5780630dc0344a1461028157806310dbd9d714610289575b600080fd5b6102586102533660046114d2565b610442565b60405161026591906119a7565b60405180910390f35b61025861027c3660046114d2565b6105ca565b6102586105dc565b61029c6102973660046114d2565b6105e2565b6040516102659291906119c7565b6102bd6102b83660046114d2565b61077e565b6040516102659190611650565b6102d2610793565b005b6102586108ab565b6102586108ca565b6102bd6102f23660046114d2565b6108d0565b6102ff6108e5565b6040516102659190611623565b61025861031a3660046114d2565b6108f4565b610258610906565b610258610955565b61025861095b565b610258610969565b6102d261096f565b6102d26103553660046115a8565b6109fb565b610258610a9c565b6102d26103703660046114ed565b610bc8565b6102ff610c4c565b6102d261038b3660046115d8565b610c5b565b6102d261039e3660046114d2565b610ca7565b6102d26103b1366004611517565b610d05565b6102d26103c43660046114d2565b610d4d565b6102586103d73660046114d2565b610d59565b6102bd610d6b565b6102d2610d74565b610258610d7f565b610258610d85565b6102ff610d8b565b610258610d9a565b6102d261041a3660046114d2565b610da0565b61025861042d3660046114d2565b610e63565b610258610e75565b6102d2610e95565b6001600160a01b0381166000908152600e602052604081205460ff1661046a575060006105c5565b600080610476846105e2565b9092509050620f424082610519576001600160a01b03851660009081526011602052604090205482116104af57600093505050506105c5565b6001600160a01b0385166000908152601160205260408120546104d3908490610f9f565b6001600160a01b038716600090815260116020526040812054919250906104fb904290610f9f565b90506105148161050e620f424085610fe1565b90610f54565b925050505b6001600160a01b0385166000908152600f60205260408120548085111561054257809150610554565b610551600261050e878461101b565b91505b506001600160a01b0386166000908152600b6020908152604080832054600a909252909120546105be91906105b89069d3c21bcecceda10000009061050e9087906105b2906105ab906105a5610906565b90610f9f565b8890610fe1565b90610fe1565b9061101b565b9450505050505b919050565b60106020526000908152604090205481565b600c5481565b6002546040516370a0823160e01b8152600091829182916001600160a01b0316906370a0823190610617908790600401611623565b60206040518083038186803b15801561062f57600080fd5b505afa158015610643573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066791906115c0565b90506106716114a4565b6002546040517fcbf9fe5f0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063cbf9fe5f906106ba908890600401611623565b604080518083038186803b1580156106d157600080fd5b505afa1580156106e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610709919061154f565b6020808201516001600160a01b038816600090815260109092526040909120549094509091501580159061075557506001600160a01b0385166000908152601060205260409020544210155b156107635760009350610777565b8242106107735760009350610777565b8193505b5050915091565b600e6020526000908152604090205460ff1681565b61079b611040565b6000546001600160a01b039081169116146107d15760405162461bcd60e51b81526004016107c8906118b8565b60405180910390fd5b4260068190556008546107e4919061101b565b600555600254604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290516001600160a01b03909216916318160ddd91600480820192602092909190829003018186803b15801561084557600080fd5b505afa158015610859573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087d91906115c0565b600d556040517fb5cfe3ccd03847076864f081609024cbc2eb98c38da4d8b2cebe9479a9a1ef3790600090a1565b60006108c4600854600754610fe190919063ffffffff16565b90505b90565b600d5481565b60126020526000908152604090205460ff1681565b6004546001600160a01b031681565b600b6020526000908152604090205481565b6000600d546000141561091c57506009546108c7565b61094e610945600d5461050e670de0b6b3a76400006105b26007546105b26006546105a561095b565b6009549061101b565b90506108c7565b60095481565b60006108c442600554611044565b60075481565b610977611040565b6000546001600160a01b039081169116146109a45760405162461bcd60e51b81526004016107c8906118b8565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b610a03611040565b6000546001600160a01b03908116911614610a305760405162461bcd60e51b81526004016107c8906118b8565b6005541580610a40575060055442115b610a5c5760405162461bcd60e51b81526004016107c8906118ed565b60088190556040517fce653f06b9044b00e7d9d01b9b4228e84812092cb6a38371889bef19370d21f790610a919083906119a7565b60405180910390a150565b600060026001541415610ac15760405162461bcd60e51b81526004016107c890611970565b600260015560135460ff1615610ae95760405162461bcd60e51b81526004016107c890611790565b33610af38161105a565b3360009081526012602052604090205460ff1615610b235760405162461bcd60e51b81526004016107c890611824565b336000908152600b602052604090205491508115610bae57336000818152600b6020526040812055600454610b64916001600160a01b039091169084611160565b60045460405133917f3998039806f6db7e5d83a5371638cc47dd2e9ae500d5d561d95ec6381f53e3cd91610ba59186916001600160a01b03909116906119b0565b60405180910390a25b503360009081526011602052604090204290556001805590565b610bd0611040565b6000546001600160a01b03908116911614610bfd5760405162461bcd60e51b81526004016107c8906118b8565b610c0f82610c09610c4c565b83611160565b7f55350610fe57096d8c0ffa30beede987326bccfcb0b4415804164d0dd50ce8b18282604051610c40929190611637565b60405180910390a15050565b6000546001600160a01b031690565b610c63611040565b6000546001600160a01b03908116911614610c905760405162461bcd60e51b81526004016107c8906118b8565b60078290558015610ca357610ca3610e95565b5050565b610caf611040565b6000546001600160a01b03908116911614610cdc5760405162461bcd60e51b81526004016107c8906118b8565b6001600160a01b03166000908152601260205260409020805460ff19811660ff90911615179055565b610d0d611040565b6000546001600160a01b03908116911614610d3a5760405162461bcd60e51b81526004016107c8906118b8565b6013805460ff1916911515919091179055565b610d568161105a565b50565b600a6020526000908152604090205481565b60135460ff1681565b610d7d3361105a565b565b60065481565b60085481565b6003546001600160a01b031681565b60055481565b610da8611040565b6000546001600160a01b03908116911614610dd55760405162461bcd60e51b81526004016107c8906118b8565b6001600160a01b038116610dfb5760405162461bcd60e51b81526004016107c8906116c5565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600f6020526000908152604090205481565b60006108c4600d5461050e620f4240600c54610fe190919063ffffffff16565b600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ee357600080fd5b505afa158015610ef7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1b91906115c0565b600d55600554421115610f3557610f30611263565b610d7d565b6000610f3f610906565b60098190559050610f4e61095b565b60065550565b6000610f9683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506113f8565b90505b92915050565b6000610f9683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061142f565b600082610ff057506000610f99565b82820282848281610ffd57fe5b0414610f965760405162461bcd60e51b81526004016107c89061185b565b600082820183811015610f965760405162461bcd60e51b81526004016107c890611722565b3390565b60008183106110535781610f96565b5090919050565b611062610e95565b61106b8161145b565b6001600160a01b0381166000908152600f6020526040812054908061108f846105e2565b6001600160a01b0386166000908152600f602090815260408083208590556010909152902081905590925090508282106110e85760006110cf8385610f9f565b600c549091506110df908261101b565b600c5550611109565b60006110f48484610f9f565b600c549091506111049082610f9f565b600c55505b6001600160a01b0384166000908152600e602052604090205460ff1661115a576001600160a01b0384166000908152600e60209081526040808320805460ff19166001179055601190915290204290555b50505050565b60006060846001600160a01b031663a9059cbb8585604051602401611186929190611637565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516111d49190611607565b6000604051808303816000865af19150503d8060008114611211576040519150601f19603f3d011682016040523d82523d6000602084013e611216565b606091505b50915091508180156112405750805115806112405750808060200190518101906112409190611533565b61125c5760405162461bcd60e51b81526004016107c89061168e565b5050505050565b60055442116112845760405162461bcd60e51b81526004016107c890611759565b600060085461129e60055442610f9f90919063ffffffff16565b816112a557fe5b6003546040516370a0823160e01b81529290910492506000916001600160a01b03909116906370a08231906112de903090600401611623565b60206040518083038186803b1580156112f657600080fd5b505afa15801561130a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132e91906115c0565b90508061134f836001016105b2600854600754610fe190919063ffffffff16565b111561136d5760405162461bcd60e51b81526004016107c8906117c7565b60085461138c90611383906105b285600161101b565b6005549061101b565b6005556000611399610906565b600981905590506113a861095b565b6006556004546007546040517fb304aeb00c30205e714696b5e1e78d04e16b0ad608da8c3c700796c1ddea6367926113eb926001600160a01b0390911691611637565b60405180910390a1505050565b600081836114195760405162461bcd60e51b81526004016107c8919061165b565b50600083858161142557fe5b0495945050505050565b600081848411156114535760405162461bcd60e51b81526004016107c8919061165b565b505050900390565b6001600160a01b03811615610d5657600061147582610442565b6001600160a01b0383166000908152600b6020908152604080832093909355600954600a909152919020555050565b604080518082019091526000808252602082015290565b80356001600160a01b0381168114610f9957600080fd5b6000602082840312156114e3578081fd5b610f9683836114bb565b600080604083850312156114ff578081fd5b61150984846114bb565b946020939093013593505050565b600060208284031215611528578081fd5b8135610f9681611a01565b600060208284031215611544578081fd5b8151610f9681611a01565b600060408284031215611560578081fd5b6040516040810181811067ffffffffffffffff8211171561157f578283fd5b6040528251600f81900b8114611593578283fd5b81526020928301519281019290925250919050565b6000602082840312156115b9578081fd5b5035919050565b6000602082840312156115d1578081fd5b5051919050565b600080604083850312156115ea578182fd5b8235915060208301356115fc81611a01565b809150509250929050565b600082516116198184602087016119d5565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b600060208252825180602084015261167a8160408501602087016119d5565b601f01601f19169190910160400192915050565b6020808252601f908201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601b908201527f506572696f6420686173206e6f74206578706972656420796574210000000000604082015260600190565b6020808252601a908201527f5969656c6420636f6c6c656374696f6e20697320706175736564000000000000604082015260600190565b60208082526039908201527f4e6f7420656e6f75676820656d6974746564546f6b656e20617661696c61626c60408201527f6520666f72207969656c6420646973747269627574696f6e2100000000000000606082015260800190565b6020808252601b908201527f4164647265737320686173206265656e20677265796c69737465640000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526056908201527f50726576696f7573207969656c6420706572696f64206d75737420626520636f60408201527f6d706c657465206265666f7265206368616e67696e672074686520647572617460608201527f696f6e20666f7220746865206e657720706572696f6400000000000000000000608082015260a00190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b9182526001600160a01b0316602082015260400190565b918252602082015260400190565b60005b838110156119f05781810151838201526020016119d8565b8381111561115a5750506000910152565b8015158114610d5657600080fdfea264697066735822122031c51bae47f0edaae86469170d7e77fe59bdf0c779a0d5ad220fe4845758940664736f6c63430007010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102405760003560e01c80637c26287111610145578063c2c4c5c1116100bd578063ebe2b12b1161008c578063f40c1ca711610071578063f40c1ca71461041f578063fc939bb114610432578063fff6cae91461043a57610240565b8063ebe2b12b14610404578063f2fde38b1461040c57610240565b8063c2c4c5c1146103e4578063c8f33c91146103ec578063e172cf21146103f4578063e9218ff6146103fc57610240565b8063941d9f65116101145780639f8a835a116100f95780639f8a835a146103b6578063a875f472146103c9578063ad1148cb146103dc57610240565b8063941d9f6514610390578063948e25a2146103a357610240565b80637c2628711461035a5780638980f11f146103625780638da5cb5b1461037557806391519bda1461037d57610240565b806331ca208c116101d8578063561fd712116101a75780636999ac931161018c5780636999ac9314610337578063715018a61461033f57806374ea0b981461034757610240565b8063561fd7121461032757806356d9fff31461032f57610240565b806331ca208c146102e457806338359fc2146102f757806350fe98ac1461030c5780635169a7a11461031f57610240565b806314b305371161021457806314b30537146102aa578063169d27ef146102ca57806319aec6d2146102d457806322415660146102dc57610240565b80628cc2621461024557806302be7f8e1461026e5780630dc0344a1461028157806310dbd9d714610289575b600080fd5b6102586102533660046114d2565b610442565b60405161026591906119a7565b60405180910390f35b61025861027c3660046114d2565b6105ca565b6102586105dc565b61029c6102973660046114d2565b6105e2565b6040516102659291906119c7565b6102bd6102b83660046114d2565b61077e565b6040516102659190611650565b6102d2610793565b005b6102586108ab565b6102586108ca565b6102bd6102f23660046114d2565b6108d0565b6102ff6108e5565b6040516102659190611623565b61025861031a3660046114d2565b6108f4565b610258610906565b610258610955565b61025861095b565b610258610969565b6102d261096f565b6102d26103553660046115a8565b6109fb565b610258610a9c565b6102d26103703660046114ed565b610bc8565b6102ff610c4c565b6102d261038b3660046115d8565b610c5b565b6102d261039e3660046114d2565b610ca7565b6102d26103b1366004611517565b610d05565b6102d26103c43660046114d2565b610d4d565b6102586103d73660046114d2565b610d59565b6102bd610d6b565b6102d2610d74565b610258610d7f565b610258610d85565b6102ff610d8b565b610258610d9a565b6102d261041a3660046114d2565b610da0565b61025861042d3660046114d2565b610e63565b610258610e75565b6102d2610e95565b6001600160a01b0381166000908152600e602052604081205460ff1661046a575060006105c5565b600080610476846105e2565b9092509050620f424082610519576001600160a01b03851660009081526011602052604090205482116104af57600093505050506105c5565b6001600160a01b0385166000908152601160205260408120546104d3908490610f9f565b6001600160a01b038716600090815260116020526040812054919250906104fb904290610f9f565b90506105148161050e620f424085610fe1565b90610f54565b925050505b6001600160a01b0385166000908152600f60205260408120548085111561054257809150610554565b610551600261050e878461101b565b91505b506001600160a01b0386166000908152600b6020908152604080832054600a909252909120546105be91906105b89069d3c21bcecceda10000009061050e9087906105b2906105ab906105a5610906565b90610f9f565b8890610fe1565b90610fe1565b9061101b565b9450505050505b919050565b60106020526000908152604090205481565b600c5481565b6002546040516370a0823160e01b8152600091829182916001600160a01b0316906370a0823190610617908790600401611623565b60206040518083038186803b15801561062f57600080fd5b505afa158015610643573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066791906115c0565b90506106716114a4565b6002546040517fcbf9fe5f0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063cbf9fe5f906106ba908890600401611623565b604080518083038186803b1580156106d157600080fd5b505afa1580156106e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610709919061154f565b6020808201516001600160a01b038816600090815260109092526040909120549094509091501580159061075557506001600160a01b0385166000908152601060205260409020544210155b156107635760009350610777565b8242106107735760009350610777565b8193505b5050915091565b600e6020526000908152604090205460ff1681565b61079b611040565b6000546001600160a01b039081169116146107d15760405162461bcd60e51b81526004016107c8906118b8565b60405180910390fd5b4260068190556008546107e4919061101b565b600555600254604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290516001600160a01b03909216916318160ddd91600480820192602092909190829003018186803b15801561084557600080fd5b505afa158015610859573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087d91906115c0565b600d556040517fb5cfe3ccd03847076864f081609024cbc2eb98c38da4d8b2cebe9479a9a1ef3790600090a1565b60006108c4600854600754610fe190919063ffffffff16565b90505b90565b600d5481565b60126020526000908152604090205460ff1681565b6004546001600160a01b031681565b600b6020526000908152604090205481565b6000600d546000141561091c57506009546108c7565b61094e610945600d5461050e670de0b6b3a76400006105b26007546105b26006546105a561095b565b6009549061101b565b90506108c7565b60095481565b60006108c442600554611044565b60075481565b610977611040565b6000546001600160a01b039081169116146109a45760405162461bcd60e51b81526004016107c8906118b8565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b610a03611040565b6000546001600160a01b03908116911614610a305760405162461bcd60e51b81526004016107c8906118b8565b6005541580610a40575060055442115b610a5c5760405162461bcd60e51b81526004016107c8906118ed565b60088190556040517fce653f06b9044b00e7d9d01b9b4228e84812092cb6a38371889bef19370d21f790610a919083906119a7565b60405180910390a150565b600060026001541415610ac15760405162461bcd60e51b81526004016107c890611970565b600260015560135460ff1615610ae95760405162461bcd60e51b81526004016107c890611790565b33610af38161105a565b3360009081526012602052604090205460ff1615610b235760405162461bcd60e51b81526004016107c890611824565b336000908152600b602052604090205491508115610bae57336000818152600b6020526040812055600454610b64916001600160a01b039091169084611160565b60045460405133917f3998039806f6db7e5d83a5371638cc47dd2e9ae500d5d561d95ec6381f53e3cd91610ba59186916001600160a01b03909116906119b0565b60405180910390a25b503360009081526011602052604090204290556001805590565b610bd0611040565b6000546001600160a01b03908116911614610bfd5760405162461bcd60e51b81526004016107c8906118b8565b610c0f82610c09610c4c565b83611160565b7f55350610fe57096d8c0ffa30beede987326bccfcb0b4415804164d0dd50ce8b18282604051610c40929190611637565b60405180910390a15050565b6000546001600160a01b031690565b610c63611040565b6000546001600160a01b03908116911614610c905760405162461bcd60e51b81526004016107c8906118b8565b60078290558015610ca357610ca3610e95565b5050565b610caf611040565b6000546001600160a01b03908116911614610cdc5760405162461bcd60e51b81526004016107c8906118b8565b6001600160a01b03166000908152601260205260409020805460ff19811660ff90911615179055565b610d0d611040565b6000546001600160a01b03908116911614610d3a5760405162461bcd60e51b81526004016107c8906118b8565b6013805460ff1916911515919091179055565b610d568161105a565b50565b600a6020526000908152604090205481565b60135460ff1681565b610d7d3361105a565b565b60065481565b60085481565b6003546001600160a01b031681565b60055481565b610da8611040565b6000546001600160a01b03908116911614610dd55760405162461bcd60e51b81526004016107c8906118b8565b6001600160a01b038116610dfb5760405162461bcd60e51b81526004016107c8906116c5565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600f6020526000908152604090205481565b60006108c4600d5461050e620f4240600c54610fe190919063ffffffff16565b600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ee357600080fd5b505afa158015610ef7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1b91906115c0565b600d55600554421115610f3557610f30611263565b610d7d565b6000610f3f610906565b60098190559050610f4e61095b565b60065550565b6000610f9683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506113f8565b90505b92915050565b6000610f9683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061142f565b600082610ff057506000610f99565b82820282848281610ffd57fe5b0414610f965760405162461bcd60e51b81526004016107c89061185b565b600082820183811015610f965760405162461bcd60e51b81526004016107c890611722565b3390565b60008183106110535781610f96565b5090919050565b611062610e95565b61106b8161145b565b6001600160a01b0381166000908152600f6020526040812054908061108f846105e2565b6001600160a01b0386166000908152600f602090815260408083208590556010909152902081905590925090508282106110e85760006110cf8385610f9f565b600c549091506110df908261101b565b600c5550611109565b60006110f48484610f9f565b600c549091506111049082610f9f565b600c55505b6001600160a01b0384166000908152600e602052604090205460ff1661115a576001600160a01b0384166000908152600e60209081526040808320805460ff19166001179055601190915290204290555b50505050565b60006060846001600160a01b031663a9059cbb8585604051602401611186929190611637565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516111d49190611607565b6000604051808303816000865af19150503d8060008114611211576040519150601f19603f3d011682016040523d82523d6000602084013e611216565b606091505b50915091508180156112405750805115806112405750808060200190518101906112409190611533565b61125c5760405162461bcd60e51b81526004016107c89061168e565b5050505050565b60055442116112845760405162461bcd60e51b81526004016107c890611759565b600060085461129e60055442610f9f90919063ffffffff16565b816112a557fe5b6003546040516370a0823160e01b81529290910492506000916001600160a01b03909116906370a08231906112de903090600401611623565b60206040518083038186803b1580156112f657600080fd5b505afa15801561130a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132e91906115c0565b90508061134f836001016105b2600854600754610fe190919063ffffffff16565b111561136d5760405162461bcd60e51b81526004016107c8906117c7565b60085461138c90611383906105b285600161101b565b6005549061101b565b6005556000611399610906565b600981905590506113a861095b565b6006556004546007546040517fb304aeb00c30205e714696b5e1e78d04e16b0ad608da8c3c700796c1ddea6367926113eb926001600160a01b0390911691611637565b60405180910390a1505050565b600081836114195760405162461bcd60e51b81526004016107c8919061165b565b50600083858161142557fe5b0495945050505050565b600081848411156114535760405162461bcd60e51b81526004016107c8919061165b565b505050900390565b6001600160a01b03811615610d5657600061147582610442565b6001600160a01b0383166000908152600b6020908152604080832093909355600954600a909152919020555050565b604080518082019091526000808252602082015290565b80356001600160a01b0381168114610f9957600080fd5b6000602082840312156114e3578081fd5b610f9683836114bb565b600080604083850312156114ff578081fd5b61150984846114bb565b946020939093013593505050565b600060208284031215611528578081fd5b8135610f9681611a01565b600060208284031215611544578081fd5b8151610f9681611a01565b600060408284031215611560578081fd5b6040516040810181811067ffffffffffffffff8211171561157f578283fd5b6040528251600f81900b8114611593578283fd5b81526020928301519281019290925250919050565b6000602082840312156115b9578081fd5b5035919050565b6000602082840312156115d1578081fd5b5051919050565b600080604083850312156115ea578182fd5b8235915060208301356115fc81611a01565b809150509250929050565b600082516116198184602087016119d5565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b600060208252825180602084015261167a8160408501602087016119d5565b601f01601f19169190910160400192915050565b6020808252601f908201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601b908201527f506572696f6420686173206e6f74206578706972656420796574210000000000604082015260600190565b6020808252601a908201527f5969656c6420636f6c6c656374696f6e20697320706175736564000000000000604082015260600190565b60208082526039908201527f4e6f7420656e6f75676820656d6974746564546f6b656e20617661696c61626c60408201527f6520666f72207969656c6420646973747269627574696f6e2100000000000000606082015260800190565b6020808252601b908201527f4164647265737320686173206265656e20677265796c69737465640000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526056908201527f50726576696f7573207969656c6420706572696f64206d75737420626520636f60408201527f6d706c657465206265666f7265206368616e67696e672074686520647572617460608201527f696f6e20666f7220746865206e657720706572696f6400000000000000000000608082015260a00190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b9182526001600160a01b0316602082015260400190565b918252602082015260400190565b60005b838110156119f05781810151838201526020016119d8565b8381111561115a5750506000910152565b8015158114610d5657600080fdfea264697066735822122031c51bae47f0edaae86469170d7e77fe59bdf0c779a0d5ad220fe4845758940664736f6c63430007010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30,
        "contract": "src/Rewards/HiIQRewards.sol:HiIQRewards",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1413,
        "contract": "src/Rewards/HiIQRewards.sol:HiIQRewards",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1907,
        "contract": "src/Rewards/HiIQRewards.sol:HiIQRewards",
        "label": "hiIQ",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IhiIQ)1692"
      },
      {
        "astId": 1909,
        "contract": "src/Rewards/HiIQRewards.sol:HiIQRewards",
        "label": "emittedToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ERC20)907"
      },
      {
        "astId": 1911,
        "contract": "src/Rewards/HiIQRewards.sol:HiIQRewards",
        "label": "emitted_token_address",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1916,
        "contract": "src/Rewards/HiIQRewards.sol:HiIQRewards",
        "label": "periodFinish",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1918,
        "contract": "src/Rewards/HiIQRewards.sol:HiIQRewards",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1920,
        "contract": "src/Rewards/HiIQRewards.sol:HiIQRewards",
        "label": "yieldRate",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1923,
        "contract": "src/Rewards/HiIQRewards.sol:HiIQRewards",
        "label": "yieldDuration",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1926,
        "contract": "src/Rewards/HiIQRewards.sol:HiIQRewards",
        "label": "yieldPerHiIQStored",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1930,
        "contract": "src/Rewards/HiIQRewards.sol:HiIQRewards",
        "label": "userYieldPerTokenPaid",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1934,
        "contract": "src/Rewards/HiIQRewards.sol:HiIQRewards",
        "label": "yields",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1937,
        "contract": "src/Rewards/HiIQRewards.sol:HiIQRewards",
        "label": "totalHiIQParticipating",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1940,
        "contract": "src/Rewards/HiIQRewards.sol:HiIQRewards",
        "label": "totalHiIQSupplyStored",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1944,
        "contract": "src/Rewards/HiIQRewards.sol:HiIQRewards",
        "label": "userIsInitialized",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1948,
        "contract": "src/Rewards/HiIQRewards.sol:HiIQRewards",
        "label": "userHiIQCheckpointed",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1952,
        "contract": "src/Rewards/HiIQRewards.sol:HiIQRewards",
        "label": "userHiIQEndpointCheckpointed",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1956,
        "contract": "src/Rewards/HiIQRewards.sol:HiIQRewards",
        "label": "lastRewardClaimTime",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1960,
        "contract": "src/Rewards/HiIQRewards.sol:HiIQRewards",
        "label": "greylist",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1963,
        "contract": "src/Rewards/HiIQRewards.sol:HiIQRewards",
        "label": "yieldCollectionPaused",
        "offset": 0,
        "slot": "19",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ERC20)907": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IhiIQ)1692": {
        "encoding": "inplace",
        "label": "contract IhiIQ",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}